2022-09-29 15:27:03,795 - mmpose - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.13 (default, Mar 29 2022, 02:18:16) [GCC 7.5.0]
CUDA available: True
GPU 0: NVIDIA TITAN X (Pascal)
CUDA_HOME: /usr
NVCC: Cuda compilation tools, release 10.1, V10.1.24
GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
PyTorch: 1.8.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.9.0
OpenCV: 4.5.5
MMCV: 1.5.2
MMCV Compiler: GCC 9.4
MMCV CUDA Compiler: 10.1
MMPose: 0.26.0+212b0d9
------------------------------------------------------------

2022-09-29 15:27:03,795 - mmpose - INFO - Distributed training: False
2022-09-29 15:27:05,974 - mmpose - INFO - Config:
checkpoint_config = dict(interval=20)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
log_level = 'INFO'
load_from = None
resume_from = None
dist_params = dict(backend='nccl')
workflow = [('train', 1)]
opencv_num_threads = 0
mp_start_method = 'fork'
dataset_info = dict(
    dataset_name='harbor_porpoises',
    paper_info=dict(
        author='Alexander Rasmussen',
        title='Detection and Tracking of Harbour Porpoises in UAV Recordings',
        year='2022'),
    keypoint_info=dict({
        0:
        dict(name='head', id=0, color=[191, 92, 77], type='upper', swap=''),
        1:
        dict(name='fin', id=1, color=[217, 145, 0], type='upper', swap=''),
        2:
        dict(
            name='tail_base',
            id=2,
            color=[77, 128, 104],
            type='lower',
            swap=''),
        3:
        dict(
            name='left_fluke',
            id=3,
            color=[51, 153, 255],
            type='lower',
            swap=''),
        4:
        dict(
            name='right_fluke', id=4, color=[0, 255, 0], type='lower', swap='')
    }),
    skeleton_info=dict({
        0:
        dict(link=('fin', 'head'), id=0, color=[173, 127, 168]),
        1:
        dict(link=('fin', 'tail_base'), id=1, color=[173, 127, 168]),
        3:
        dict(link=('tail_base', 'left_fluke'), id=2, color=[173, 127, 168]),
        4:
        dict(link=('tail_base', 'right_fluke'), id=3, color=[173, 127, 168])
    }),
    joint_weights=[1.0, 1.0, 1.0, 1.0, 1.0],
    sigmas=[0.072, 0.072, 0.072, 0.072, 0.072])
evaluation = dict(interval=10, metric='mAP', save_best='AP')
optimizer = dict(type='Adam', lr=0.0001, amsgrad=True)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=5,
    warmup_ratio=0.01,
    warmup_by_epoch=True,
    step=[25, 50, 75])
total_epochs = 100
channel_cfg = dict(
    num_output_channels=5,
    dataset_joints=5,
    dataset_channel=[[0, 1, 2, 3, 4]],
    inference_channel=[0, 1, 2, 3, 4])
data_cfg = dict(
    image_size=512,
    base_size=256,
    base_sigma=2,
    heatmap_size=[128],
    num_joints=5,
    dataset_channel=[[0, 1, 2, 3, 4]],
    inference_channel=[0, 1, 2, 3, 4],
    num_scales=1,
    scale_aware_sigma=False)
model = dict(
    type='AssociativeEmbedding',
    pretrained='checkpoints/crnet.pth',
    backbone=dict(type='CRNet'),
    keypoint_head=dict(
        type='AESimpleHead',
        in_channels=2048,
        num_joints=5,
        tag_per_joint=True,
        with_ae_loss=[True],
        loss_keypoint=dict(
            type='MultiLossFactory',
            num_joints=5,
            num_stages=1,
            ae_loss_type='exp',
            with_ae_loss=[True],
            push_loss_factor=[0.001],
            pull_loss_factor=[0.001],
            with_heatmaps_loss=[True],
            heatmaps_loss_factor=[1.0])),
    train_cfg=dict(),
    test_cfg=dict(
        num_joints=5,
        max_num_people=10,
        scale_factor=[1],
        with_heatmaps=[True],
        with_ae=[True],
        project2image=True,
        align_corners=False,
        nms_kernel=5,
        nms_padding=2,
        tag_per_joint=True,
        detection_threshold=0.1,
        tag_threshold=1,
        use_detection_val=True,
        ignore_too_much=False,
        adjust=True,
        refine=True,
        flip_test=True))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='BottomUpRandomAffine',
        rot_factor=180,
        scale_factor=[0.8, 1.2],
        scale_type='short',
        trans_factor=40),
    dict(type='BottomUpRandomFlip', flip_prob=0.5),
    dict(type='ToTensor'),
    dict(
        type='NormalizeTensor',
        mean=[0.485, 0.456, 0.406],
        std=[0.229, 0.224, 0.225]),
    dict(type='BottomUpGenerateTarget', sigma=2, max_num_people=10),
    dict(
        type='Collect',
        keys=['img', 'joints', 'targets', 'masks'],
        meta_keys=[])
]
val_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='BottomUpGetImgSize', test_scale_factor=[1]),
    dict(
        type='BottomUpResizeAlign',
        transforms=[
            dict(type='ToTensor'),
            dict(
                type='NormalizeTensor',
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225])
        ]),
    dict(
        type='Collect',
        keys=['img'],
        meta_keys=[
            'image_file', 'aug_data', 'test_scale_factor', 'base_size',
            'center', 'scale', 'flip_index'
        ])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='BottomUpGetImgSize', test_scale_factor=[1]),
    dict(
        type='BottomUpResizeAlign',
        transforms=[
            dict(type='ToTensor'),
            dict(
                type='NormalizeTensor',
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225])
        ]),
    dict(
        type='Collect',
        keys=['img'],
        meta_keys=[
            'image_file', 'aug_data', 'test_scale_factor', 'base_size',
            'center', 'scale', 'flip_index'
        ])
]
data_root = 'data'
data = dict(
    workers_per_gpu=1,
    train_dataloader=dict(samples_per_gpu=4),
    val_dataloader=dict(samples_per_gpu=1),
    test_dataloader=dict(samples_per_gpu=1),
    train=dict(
        type='HarborPorpoisesBottomUpCocoDataset',
        ann_file='data/annotations/train.json',
        img_prefix='data/training/',
        data_cfg=dict(
            image_size=512,
            base_size=256,
            base_sigma=2,
            heatmap_size=[128],
            num_joints=5,
            dataset_channel=[[0, 1, 2, 3, 4]],
            inference_channel=[0, 1, 2, 3, 4],
            num_scales=1,
            scale_aware_sigma=False),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='BottomUpRandomAffine',
                rot_factor=180,
                scale_factor=[0.8, 1.2],
                scale_type='short',
                trans_factor=40),
            dict(type='BottomUpRandomFlip', flip_prob=0.5),
            dict(type='ToTensor'),
            dict(
                type='NormalizeTensor',
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225]),
            dict(type='BottomUpGenerateTarget', sigma=2, max_num_people=10),
            dict(
                type='Collect',
                keys=['img', 'joints', 'targets', 'masks'],
                meta_keys=[])
        ],
        dataset_info=dict(
            dataset_name='harbor_porpoises',
            paper_info=dict(
                author='Alexander Rasmussen',
                title=
                'Detection and Tracking of Harbour Porpoises in UAV Recordings',
                year='2022'),
            keypoint_info=dict({
                0:
                dict(
                    name='head',
                    id=0,
                    color=[191, 92, 77],
                    type='upper',
                    swap=''),
                1:
                dict(
                    name='fin',
                    id=1,
                    color=[217, 145, 0],
                    type='upper',
                    swap=''),
                2:
                dict(
                    name='tail_base',
                    id=2,
                    color=[77, 128, 104],
                    type='lower',
                    swap=''),
                3:
                dict(
                    name='left_fluke',
                    id=3,
                    color=[51, 153, 255],
                    type='lower',
                    swap=''),
                4:
                dict(
                    name='right_fluke',
                    id=4,
                    color=[0, 255, 0],
                    type='lower',
                    swap='')
            }),
            skeleton_info=dict({
                0:
                dict(link=('fin', 'head'), id=0, color=[173, 127, 168]),
                1:
                dict(link=('fin', 'tail_base'), id=1, color=[173, 127, 168]),
                3:
                dict(
                    link=('tail_base', 'left_fluke'),
                    id=2,
                    color=[173, 127, 168]),
                4:
                dict(
                    link=('tail_base', 'right_fluke'),
                    id=3,
                    color=[173, 127, 168])
            }),
            joint_weights=[1.0, 1.0, 1.0, 1.0, 1.0],
            sigmas=[0.072, 0.072, 0.072, 0.072, 0.072])),
    val=dict(
        type='HarborPorpoisesBottomUpCocoDataset',
        ann_file='data/annotations/val.json',
        img_prefix='data/training/',
        data_cfg=dict(
            image_size=512,
            base_size=256,
            base_sigma=2,
            heatmap_size=[128],
            num_joints=5,
            dataset_channel=[[0, 1, 2, 3, 4]],
            inference_channel=[0, 1, 2, 3, 4],
            num_scales=1,
            scale_aware_sigma=False),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='BottomUpGetImgSize', test_scale_factor=[1]),
            dict(
                type='BottomUpResizeAlign',
                transforms=[
                    dict(type='ToTensor'),
                    dict(
                        type='NormalizeTensor',
                        mean=[0.485, 0.456, 0.406],
                        std=[0.229, 0.224, 0.225])
                ]),
            dict(
                type='Collect',
                keys=['img'],
                meta_keys=[
                    'image_file', 'aug_data', 'test_scale_factor', 'base_size',
                    'center', 'scale', 'flip_index'
                ])
        ],
        dataset_info=dict(
            dataset_name='harbor_porpoises',
            paper_info=dict(
                author='Alexander Rasmussen',
                title=
                'Detection and Tracking of Harbour Porpoises in UAV Recordings',
                year='2022'),
            keypoint_info=dict({
                0:
                dict(
                    name='head',
                    id=0,
                    color=[191, 92, 77],
                    type='upper',
                    swap=''),
                1:
                dict(
                    name='fin',
                    id=1,
                    color=[217, 145, 0],
                    type='upper',
                    swap=''),
                2:
                dict(
                    name='tail_base',
                    id=2,
                    color=[77, 128, 104],
                    type='lower',
                    swap=''),
                3:
                dict(
                    name='left_fluke',
                    id=3,
                    color=[51, 153, 255],
                    type='lower',
                    swap=''),
                4:
                dict(
                    name='right_fluke',
                    id=4,
                    color=[0, 255, 0],
                    type='lower',
                    swap='')
            }),
            skeleton_info=dict({
                0:
                dict(link=('fin', 'head'), id=0, color=[173, 127, 168]),
                1:
                dict(link=('fin', 'tail_base'), id=1, color=[173, 127, 168]),
                3:
                dict(
                    link=('tail_base', 'left_fluke'),
                    id=2,
                    color=[173, 127, 168]),
                4:
                dict(
                    link=('tail_base', 'right_fluke'),
                    id=3,
                    color=[173, 127, 168])
            }),
            joint_weights=[1.0, 1.0, 1.0, 1.0, 1.0],
            sigmas=[0.072, 0.072, 0.072, 0.072, 0.072])),
    test=dict(
        type='HarborPorpoisesBottomUpCocoDataset',
        ann_file='data/annotations/val.json',
        img_prefix='data/val/',
        data_cfg=dict(
            image_size=512,
            base_size=256,
            base_sigma=2,
            heatmap_size=[128],
            num_joints=5,
            dataset_channel=[[0, 1, 2, 3, 4]],
            inference_channel=[0, 1, 2, 3, 4],
            num_scales=1,
            scale_aware_sigma=False),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='BottomUpGetImgSize', test_scale_factor=[1]),
            dict(
                type='BottomUpResizeAlign',
                transforms=[
                    dict(type='ToTensor'),
                    dict(
                        type='NormalizeTensor',
                        mean=[0.485, 0.456, 0.406],
                        std=[0.229, 0.224, 0.225])
                ]),
            dict(
                type='Collect',
                keys=['img'],
                meta_keys=[
                    'image_file', 'aug_data', 'test_scale_factor', 'base_size',
                    'center', 'scale', 'flip_index'
                ])
        ],
        dataset_info=dict(
            dataset_name='harbor_porpoises',
            paper_info=dict(
                author='Alexander Rasmussen',
                title=
                'Detection and Tracking of Harbour Porpoises in UAV Recordings',
                year='2022'),
            keypoint_info=dict({
                0:
                dict(
                    name='head',
                    id=0,
                    color=[191, 92, 77],
                    type='upper',
                    swap=''),
                1:
                dict(
                    name='fin',
                    id=1,
                    color=[217, 145, 0],
                    type='upper',
                    swap=''),
                2:
                dict(
                    name='tail_base',
                    id=2,
                    color=[77, 128, 104],
                    type='lower',
                    swap=''),
                3:
                dict(
                    name='left_fluke',
                    id=3,
                    color=[51, 153, 255],
                    type='lower',
                    swap=''),
                4:
                dict(
                    name='right_fluke',
                    id=4,
                    color=[0, 255, 0],
                    type='lower',
                    swap='')
            }),
            skeleton_info=dict({
                0:
                dict(link=('fin', 'head'), id=0, color=[173, 127, 168]),
                1:
                dict(link=('fin', 'tail_base'), id=1, color=[173, 127, 168]),
                3:
                dict(
                    link=('tail_base', 'left_fluke'),
                    id=2,
                    color=[173, 127, 168]),
                4:
                dict(
                    link=('tail_base', 'right_fluke'),
                    id=3,
                    color=[173, 127, 168])
            }),
            joint_weights=[1.0, 1.0, 1.0, 1.0, 1.0],
            sigmas=[0.072, 0.072, 0.072, 0.072, 0.072])))
work_dir = './work_dirs/crnet_harbor_porpoises'
gpu_ids = [0]

2022-09-29 15:27:05,975 - mmpose - INFO - Set random seed to 858545222, deterministic: False
2022-09-29 15:27:11,040 - mmpose - INFO - Start running, host: alras16@adm-59193, work_dir: /home/alras16/mmpose/work_dirs/crnet_harbor_porpoises
2022-09-29 15:27:11,041 - mmpose - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2022-09-29 15:27:11,041 - mmpose - INFO - workflow: [('train', 1)], max: 100 epochs
2022-09-29 15:27:11,041 - mmpose - INFO - Checkpoints will be saved to /home/alras16/mmpose/work_dirs/crnet_harbor_porpoises by HardDiskBackend.
